import pandas as pd
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import asyncio

TOKEN = "8082358030:AAE9YXX-zzcC9fvwjme12HJsVMxghKDX2zY"
bot = Bot(TOKEN)
dp = Dispatcher()

EXCEL_PATH = r"C:\\Users\\timur\\OneDrive\\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\\1122233.xlsx"
def load_data():
    if os.path.exists(EXCEL_PATH):
        return pd.read_excel(EXCEL_PATH)
    else:
        return pd.DataFrame()

df = load_data()
categories = df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].dropna().unique().tolist()
user_data = {}

@dp.message(F.text == "/start")
async def welcome(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]],
        resize_keyboard=True
    )
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å.",
        reply_markup=kb
    )

@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    help_text = (
        "‚ÑπÔ∏è *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üöÄ –ù–∞—á–∞—Ç—å\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤\n"
        "4. –û—Ç–º–µ—Ç—å—Ç–µ –Ω—É–∂–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –∏ –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ì–æ—Ç–æ–≤\n"
        "5. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤\n"
        "6. –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Å –Ω–æ—Ä–º–∞–º–∏, –ø—Ä–∏—á–∏–Ω–∞–º–∏ –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è–º–∏\n\n"
        "‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞."
    )
    await message.answer(help_text, parse_mode="Markdown")

@dp.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å")
async def start_analysis(message: types.Message):
    user_data[message.from_user.id] = {}
    user_data[message.from_user.id]["step"] = "awaiting_age"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=types.ReplyKeyboardRemove())

@dp.message()
async def router(message: types.Message):
    global df
    df = load_data()

    user_id = message.from_user.id
    data = user_data.get(user_id, {})
    step = data.get("step")

    if step == "awaiting_age":
        if not message.text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
            return
        age = int(message.text)
        if age < 18:
            await message.answer("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤ —É –¥–µ—Ç–µ–π (–¥–æ 18 –ª–µ—Ç). –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø–µ–¥–∏–∞—Ç—Ä—É.")
            return
        data["age"] = age
        data["step"] = "awaiting_sex"
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=kb)
        return

    if step == "awaiting_sex":
        if message.text not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π.")
            return
        data["sex"] = message.text
        data["step"] = "choosing_category"
        kb = ReplyKeyboardBuilder()
        for cat in categories:
            kb.add(KeyboardButton(text=cat))
        kb.adjust(2)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤:", reply_markup=kb.as_markup(resize_keyboard=True))
        return

    if step == "choosing_category":
        if message.text not in categories:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
        data["category"] = message.text
        data["step"] = "choosing_analyses"
        data["analyses"] = []
        data["values"] = {}

        analyses = df[df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == message.text]['–ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞'].tolist()
        kb = ReplyKeyboardBuilder()
        kb.add(KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"))
        for name in analyses:
            if name != "–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ (–û–ê–ö)":
                kb.add(KeyboardButton(text=name))
        kb.adjust(2)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ –æ–¥–Ω–æ–º—É, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ì–æ—Ç–æ–≤¬ª):",
                             reply_markup=kb.as_markup(resize_keyboard=True))
        return

    if step == "choosing_analyses":
        category = data.get("category")
        valid_analyses = df[df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category]['–ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞'].tolist()

        if message.text == "üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
            data["step"] = "choosing_category"
            kb = ReplyKeyboardBuilder()
            for cat in categories:
                kb.add(KeyboardButton(text=cat))
            kb.adjust(2)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤:", reply_markup=kb.as_markup(resize_keyboard=True))
            return

        if message.text == "‚úÖ –ì–æ—Ç–æ–≤":
            if not data["analyses"]:
                await message.answer("–í—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")
                return
            data["step"] = "entering_values"
            data["current_input"] = data["analyses"][0]
            analysis = data["current_input"]
            row = df[(df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category) & (df['–ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞'] == analysis)].iloc[0]
            norm = row['–ù–æ—Ä–º–∞ –ú (–æ—Ç-–¥–æ)'] if data["sex"] == "–ú—É–∂—Å–∫–æ–π" else row['–ù–æ—Ä–º–∞ –ñ (–æ—Ç-–¥–æ)']
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ¬´{analysis}¬ª (–ø—Ä–∏–º–µ—Ä: {norm}):", reply_markup=types.ReplyKeyboardRemove())
            return

        if message.text in valid_analyses and message.text not in data["analyses"]:
            data["analyses"].append(message.text)
            await message.answer(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω: {message.text}")
        elif message.text in data["analyses"]:
            await message.answer("–≠—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ —É–∂–µ –≤—ã–±—Ä–∞–Ω.")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ì–æ—Ç–æ–≤¬ª.")
        return

    if step == "entering_values":
        try:
            val = float(message.text.replace(",", "."))
        except:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 123.4")
            return

        current = data["current_input"]
        data["values"][current] = val
        remaining = [a for a in data["analyses"] if a not in data["values"]]
        if remaining:
            data["current_input"] = remaining[0]
            analysis = remaining[0]
            category = data["category"]
            row = df[(df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category) & (df['–ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞'] == analysis)].iloc[0]
            norm = row['–ù–æ—Ä–º–∞ –ú (–æ—Ç-–¥–æ)'] if data["sex"] == "–ú—É–∂—Å–∫–æ–π" else row['–ù–æ—Ä–º–∞ –ñ (–æ—Ç-–¥–æ)']
            await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ¬´{analysis}¬ª (–ø—Ä–∏–º–µ—Ä: {norm}):")
        else:
            await send_summary(message, data)
            kb = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üîÅ –ù–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")]],
                resize_keyboard=True
            )
            await message.answer("–ì–æ—Ç–æ–≤–æ! –ù–∞–∂–º–∏—Ç–µ ¬´üîÅ –ù–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=kb)
            data["step"] = "finished"
        return

    if step == "finished":
        if message.text == "üîÅ –ù–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ":
            user_data.pop(user_id)
            await welcome(message)
        else:
            await message.answer("–ù–∞–∂–º–∏—Ç–µ ¬´üîÅ –ù–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")

async def send_summary(message: types.Message, data):
    sex = data["sex"]
    category = data["category"]
    reply = "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏:*\n\n"

    for analysis, value in data["values"].items():
        row = df[(df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == category) & (df['–ù–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞'] == analysis)]
        if row.empty:
            result = "‚õî –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            row = row.iloc[0]
            norm_str = str(row['–ù–æ—Ä–º–∞ –ú (–æ—Ç-–¥–æ)'] if sex == "–ú—É–∂—Å–∫–æ–π" else row['–ù–æ—Ä–º–∞ –ñ (–æ—Ç-–¥–æ)'])
            try:
                min_val, max_val = map(float, norm_str.split("-"))
                if value < min_val:
                    status = "‚¨áÔ∏è –ü–æ–Ω–∏–∂–µ–Ω–æ"
                elif value > max_val:
                    status = "‚¨ÜÔ∏è –ü–æ–≤—ã—à–µ–Ω–æ"
                else:
                    status = "‚úÖ –í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã"
                result = f"{status} (–Ω–æ—Ä–º–∞: {norm_str})"
            except:
                result = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ—Ä–º—É: {norm_str}"

            reasons_up = str(row.get("–ü–æ–≤—ã—à–µ–Ω–æ (–ø—Ä–∏—á–∏–Ω—ã)", "")).strip()
            reasons_down = str(row.get("–ü–æ–Ω–∏–∂–µ–Ω–æ (–ø—Ä–∏—á–∏–Ω—ã)", "")).strip()
            notes = str(row.get("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", "")).strip()

            if status.startswith("‚¨ÜÔ∏è") and reasons_up:
                result += f"\nüßæ –ü—Ä–∏—á–∏–Ω—ã: {reasons_up}"
            if status.startswith("‚¨áÔ∏è") and reasons_down:
                result += f"\nüßæ –ü—Ä–∏—á–∏–Ω—ã: {reasons_down}"
            if notes and notes.lower() != "nan":
                result += f"\nüìå –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {notes}"

        reply += f"‚Ä¢ {analysis}: {value} ‚Üí {result}\n\n"

    await message.answer(reply, parse_mode="Markdown")

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
